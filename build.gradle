plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'fabric-loom' version '0.4-SNAPSHOT'
}

apply plugin: 'fabric-loom'

group = project.MOD_GROUP
version = project.MOD_VERSION
archivesBaseName = "${project.MOD_ID}-${MINECRAFT_VERSION}"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"
    mappings "net.fabricmc:yarn:${YARN_MAPPINGS}:v2"

    modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}"
}

// Process resources
processResources {
    inputs.property "version", project.version

    // Inject versioning
    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    // Add sources
    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json" // already modified and added above
    }
}

// Ensure the encoding is set to UTF-8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Add license to the distribution
jar {
    from rootProject.file("LICENSE.txt")
}

// Add manifest metadata
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.findProperty("MOD_NAME") ?: project.name,
                "Specification-Vendor"    : project.group,
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.MOD_ID,
                "Implementation-Vendor"   : project.group,
                "Implementation-Version"  : "${project.version} for Minecraft ${MINECRAFT_VERSION}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Generate sources distribution
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}
