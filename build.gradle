import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

import java.nio.file.Files

buildscript {
    dependencies {
        classpath group: 'org.kohsuke', name: 'github-api', version: '1.130'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

allprojects {
    apply plugin: 'fabric-loom'

    group 'me.axieum.mcmod.authme'
    version project.MOD_VERSION
    archivesBaseName = "${project.MOD_ID}-${MINECRAFT_VERSION}"

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_16

    dependencies {
        minecraft "com.mojang:minecraft:${MINECRAFT_VERSION}"
        mappings "net.fabricmc:yarn:${YARN_MAPPINGS}:v2"
        modImplementation "net.fabricmc:fabric-loader:${FABRIC_LOADER_VERSION}"

        modImplementation "com.terraformersmc:modmenu:${MOD_MENU_VERSION}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${FABRIC_API_VERSION}"
        modImplementation("me.shedaniel.cloth:cloth-config-fabric:${CLOTH_CONFIG_VERSION}") {
            exclude group: 'net.fabricmc.fabric-api'
        }

        include("me.shedaniel.cloth:cloth-config-fabric:${CLOTH_CONFIG_VERSION}") {
            exclude group: 'net.fabricmc.fabric-api'
        }

        compileOnly "org.jetbrains:annotations:${JETBRAINS_ANNOTATIONS_VERSION}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${JUNIT_JUPITER_VERSION}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${JUNIT_JUPITER_VERSION}"
    }

    test {
        useJUnitPlatform()
    }

    afterEvaluate {
        // Process resources
        processResources {
            inputs.property 'id', project.MOD_ID
            inputs.property 'name', project.findProperty('MOD_NAME') ?: project.name
            inputs.property 'version', project.version

            // Expand mod metadata
            filesMatching('fabric.mod.json') {
                expand([
                        'id'     : project.MOD_ID,
                        'name'   : project.findProperty('MOD_NAME') ?: project.name,
                        'version': project.version
                ])
            }
        }

        // Ensure the encoding is set to UTF-8 with newer Java support if present
        tasks.withType(JavaCompile).configureEach {
            it.options.encoding = 'UTF-8'
            it.options.release = 16  // Java 16
        }

        // Generate a sources distribution
        java {
            withSourcesJar()
        }

        // Add the licence to the distribution
        jar {
            from rootProject.file('LICENCE.txt')
        }
        sourcesJar {
            from rootProject.file('LICENCE.txt')
        }

        // Add manifest metadata
        jar {
            manifest {
                attributes([
                        "Specification-Title"     : project.findProperty('MOD_NAME') ?: project.name,
                        "Specification-Vendor"    : project.group,
                        "Specification-Version"   : project.version,
                        "Implementation-Title"    : project.MOD_ID,
                        "Implementation-Vendor"   : project.group,
                        "Implementation-Version"  : "${project.version} for Minecraft ${MINECRAFT_VERSION}",
                        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                ])
            }
        }
    }

    // Ensure sub-projects are remapped before the root project
    subprojects {
        rootProject.remapJar.dependsOn("${it.path}:remapJar")
    }

    // Nest any sub-projects in the distribution
    dependencies {
        afterEvaluate {
            subprojects.each {
                implementation project(":${it.name}")
                include project("${it.name}:")
            }
        }
    }

    // Publish to the CurseForge platform
    curseforge {
        // Set the CurseForge API key from environment variables
        apiKey = System.getenv('CURSE_API_KEY') ?: ''

        // Other plugin options
        options {
            forgeGradleIntegration = false
        }
    }

    // Add additional Gradle repositories
    repositories {
        mavenCentral()
        maven { name 'Fabric'; url 'https://maven.fabricmc.net/' }
        maven { name 'Shedaniel'; url 'https://maven.shedaniel.me/' }
        maven { name 'TerraformersMC'; url 'https://maven.terraformersmc.com/' }
    }
}

// Publish to the CurseForge platform
curseforge {
    // Define the main CurseForge project and its artifact(s)
    project {
        id = project.CURSE_PROJECT_ID

        // Read and set the changelog
        changelogType = "markdown"
        final chlog_file = file("${project.rootDir}/CHANGELOG.md")
        changelog = chlog_file.exists() ? new String(Files.readAllBytes(chlog_file.toPath())) : ''
        changelog = changelog.concat("\nFor a list of changes, please refer to https://github.com/${project.GITHUB_REPO}/releases/tag/v${project.version}").trim()

        // Set the appropriate release type derived from the current version (i.e. release, beta or alpha)
        releaseType = project.version.endsWith('alpha') ? 'alpha' : project.version.endsWith('beta') ? 'beta' : 'release'

        // Add supported game versions
        project.CURSE_GAME_VERSIONS.split(',').each { addGameVersion it }

        // Add any related projects
        relations {
            if (project.CURSE_RELATIONS_REQUIRED)
                project.CURSE_RELATIONS_REQUIRED.split(',').each { requiredDependency it }
            if (project.CURSE_RELATIONS_OPTIONAL)
                project.CURSE_RELATIONS_OPTIONAL.split(',').each { optionalDependency it }
            if (project.CURSE_RELATIONS_EMBEDDED)
                project.CURSE_RELATIONS_EMBEDDED.split(',').each { embeddedLibrary it }
            if (project.CURSE_RELATIONS_TOOLS)
                project.CURSE_RELATIONS_TOOLS.split(',').each { tool it }
            if (project.CURSE_RELATIONS_INCOMPATIBLE)
                project.CURSE_RELATIONS_INCOMPATIBLE.split(',').each { incompatible it }
        }

        // Set the main artifact (i.e. mod jar)
        mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar")) {
            displayName = "${project.findProperty('MOD_NAME') ?: project.name} v${project.version} for Minecraft ${MINECRAFT_VERSION}"
        }

        // Add additional main artifacts (e.g. dev jars, etc.)
        addArtifact file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-dev.jar")
        addArtifact file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-sources.jar")

        // Add any additional sub-project artifacts
        subprojects.each {
            addArtifact file("${it.buildDir}/libs/${it.archivesBaseName}-${it.version}.jar")
            addArtifact file("${it.buildDir}/libs/${it.archivesBaseName}-${it.version}-dev.jar")
            addArtifact file("${it.buildDir}/libs/${it.archivesBaseName}-${it.version}-sources.jar")
        }

        // Ensure remapping takes place before uploading
        afterEvaluate {
            uploadTask.dependsOn('remapJar')
        }
    }
}

// Tag the latest commit and publish a new release to GitHub
task github(dependsOn: remapJar) {
    group 'upload'
    description 'Tags the latest commit and publishes a new release to GitHub'

    // Skip publishing to GitHub if no access token exists in the environment variables
    onlyIf { System.getenv('GITHUB_API_KEY') != null }

    doLast {
        // Connect to the GitHub repository using an OAuth access token (e.g. a personal access token)
        def github = GitHub.connectUsingOAuth(System.getenv('GITHUB_API_KEY') as String)
        def repository = github.getRepository(project.GITHUB_REPO as String)

        // Tag the latest commit, and hence prepare a new release
        def builder = new GHReleaseBuilder(repository, "v${project.version}")
        builder.name("${project.findProperty('MOD_NAME') ?: project.name} v${project.version} for Minecraft ${MINECRAFT_VERSION}")
        builder.prerelease(project.version.endsWith('alpha') || project.version.endsWith('beta'))
        builder.commitish(project.GITHUB_BRANCH as String)

        // Read and set the changelog
        final chlog_file = file("${project.rootDir}/CHANGELOG.md")
        var changelog = chlog_file.exists() ? new String(Files.readAllBytes(chlog_file.toPath())) : ''
        builder.body(changelog.concat("\nFor a list of changes, please refer to https://github.com/${project.GITHUB_REPO}/commits").trim())

        // Create the release
        def release = builder.create()

        // Upload the main artifact (i.e. mod jar)
        release.uploadAsset(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar"), 'application/java-archive')
        // Upload additional main artifacts (e.g. dev jars, etc.)
        release.uploadAsset(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-dev.jar"), 'application/java-archive')
        release.uploadAsset(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-sources.jar"), 'application/java-archive')
        // Upload any additional sub-project artifacts
        subprojects.each {
            release.uploadAsset(file("${it.buildDir}/libs/${it.archivesBaseName}-${it.version}.jar"), 'application/java-archive')
            release.uploadAsset(file("${it.buildDir}/libs/${it.archivesBaseName}-${it.version}-dev.jar"), 'application/java-archive')
            release.uploadAsset(file("${it.buildDir}/libs/${it.archivesBaseName}-${it.version}-sources.jar"), 'application/java-archive')
        }
    }
}
